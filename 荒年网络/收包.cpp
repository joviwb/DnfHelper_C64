#include "pch.h"

UINT64 收包HOOK;//=读四字节整数（收包地址+2）+收包地址+7 初始化调用计算
开关结构 全局_总开关;
收包数据 全局_收包数据;
全局自动 全局_自动;
vector<int>怪物编号;
wchar_t 配置路径[MAX_PATH]; //取系统用户路径
vector <unsigned short> 怪物ID;

void 检测()
{
	UINT64 ACEBase64 = (UINT64)(GetModuleHandle(L"ACE-Base64.dll"));
	UINT64 dnf = (UINT64)(GetModuleHandleA("dnf.exe"));
	UINT64 ACEPBCGame64 = (UINT64)(GetModuleHandle(L"ACE-PBC-Game64.dll"));
}
void  __declspec(naked)收包处理()//__declspec(naked) 
{
	__asm
	{
			mov rsi, 收包HOOK
			mov byte ptr[rsi], 00
			movzx ebx, word ptr[r8 + 01]
			mov esi, 0xC7
			push rax
			push rbx
			push rcx
			push rdx
			push rdi
			push rsi
			push rbp
			push r8
			push r9
			push r10
			push r11
			push r12
			push r13
			push r14
			push r15
			pushfq
}
	指针拦截();
	__asm
	{
			popfq
			pop r15
			pop r14
			pop r13
			pop r12
			pop r11
			pop r10
			pop r9
			pop r8
			pop rbp
			pop rsi
			pop rdi
			pop rdx
			pop rcx
			pop rbx
			pop rax
			jmp 收包跳回
}
}

void 收包()
{
	收包HOOK = 读写_读整数型(独家收包 + 2) + 独家收包 + 7;
	JMP跳转(独家收包, (INT64)&收包处理);
}

void 指针拦截()
{
	UINT64 局_封包指针 = NULL;
	int 局_封包标识, 局_封包长度;
	_asm mov 局_封包指针, r8;
	局_封包标识 = *(short*)(局_封包指针 + 1);
	局_封包长度 = 读写_读整数型(局_封包指针 + 3);
	事件处理(局_封包标识, 局_封包长度, 局_封包指针);
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	if (message == WM_KEYUP && wParam == VK_F1)
	{
		//技能全屏();
	}
	else if (message == WM_KEYUP && wParam == VK_END)
	{
		自动开关();
	}
	else if (message == WM_KEYUP && wParam == VK_F2)
	{
		//技能Call(读写_读长整数(人物基址), 11422, 0, 400, 200, 0, 20);
	}
	return CallWindowProc(全局_收包数据.进程, hWnd, message, wParam, lParam);
}

void 事件处理(int 封包标识, int 封包长度, UINT64 封包指针)
{
	if (封包标识 == 53)
	{
	}
	if (封包标识 == 21)
	{
		if (全局_收包数据.游戏句柄 == 0)
		{
			获取配置路径();//获取桌面路径写入全局变量中
			全局_收包数据.游戏句柄 = FindWindow(L"地下城与勇士", L"地下城与勇士");
			全局_收包数据.进程 = (WNDPROC)GetWindowLongPtr(全局_收包数据.游戏句柄, GWLP_WNDPROC);
			SetWindowLongPtr(全局_收包数据.游戏句柄, GWLP_WNDPROC, (LONG_PTR)WndProc);
			神话公告(L"激活成功 - 滑天下之大稽");
			神话公告(L"END 自动开关 ");
			if (文件是否存在(配置路径) == false)
			{
				写配置(L"功能处理", L"功能选择", L"2  [ 1 = 组包秒杀 2 = 技能全屏 ]");
				写配置(L"全屏配置", L"技能模式", L"1  [ 1 = 技能全屏 2 = 白字全屏  3= 释放全屏 ]");
				写配置(L"全屏配置", L"技能代码", L"54141");
				写配置(L"全屏配置", L"技能伤害", L"5201314");
				写配置(L"全屏配置", L"技能频率", L"300");
				写配置(L"全屏配置", L"技能个数", L"1");
				写配置(L"全屏配置", L"技能大小", L"30");

				写配置(L"自动模式", L"智能模式", L"1  [ 1 = 智能模式 2 = 自动剧情 3 = 最高等级 4 = 自动每日 ]");//刷每日推荐强顺过图
				写配置(L"自动模式", L"副本编号", L"100000003");
				写配置(L"自动模式", L"副本难度", L"5  [0 = 普通 1 = 冒险 2 = 勇士 3 = 王者 4 = 噩梦 5 = 最高等级 ]");
				写配置(L"疲劳配置", L"预留疲劳", L"10 [ 预留疲劳防止追封 ]");
				写配置(L"角色配置", L"角色数量", L"20 [ 角色数量 ]");
				写配置(L"装备处理", L"装备分解", L"2  [ 1 = 出售装备 2 = 分解装备 ]");
				写配置(L"顺图处理", L"顺图模式", L"2  [ 1 = 坐标顺图 2 = 强制顺图 ]");
				写配置(L"翻牌处理", L"翻牌模式", L"1  [ 0 = 正常翻牌 1 = 快速翻牌 2 = 急速翻牌 ]");

				写配置(L"自动每日", L"皇宫根特", L"6  [ 不刷填写0即可 ]");
				写配置(L"自动每日", L"无底坑道", L"3  [ 不刷填写0即可 ]");
				写配置(L"自动每日", L"记忆之地", L"3  [ 不刷填写0即可 ]");
				写配置(L"自动每日", L"痛苦地下室", L"2  [ 不刷填写0即可 ]");
				写配置(L"自动每日", L"暗黑神殿", L"  [ 不刷填写0即可 ]");
				写配置(L"自动每日", L"角色个数", L"15\t\t//");
			}
		}
		全局_自动.参_切换角色 = true;
		全局_自动.参_已经进图 = false;
	}
	if (封包标识 == 1103)
	{

		int Sleep_ = 333333 + rand() % 666666;
		读写_写长整数(读写_读长整数(评分基址) + 0xD00, Sleep_);
	}
	if (封包标识 == 24 && 全局_总开关.自动刷图开关 == true)
	{
		全局_自动.参_已经进图 = false;
		全局_自动.参_可以顺图 = false;
	}
	if (封包标识 == 27 && 全局_总开关.自动刷图开关 == true)
	{
		全局_自动.参_已经进图 = true;
		if (读配置(L"自动模式", L"智能模式") == 1)
		{
			if (全局_自动.副本难度 == 5)
			{
				if (全局_自动.副本编号 == 100000214 || 全局_自动.副本编号 == 100000212 || 全局_自动.副本编号 == 100000215 || 全局_自动.副本编号 == 100000199 || 全局_自动.副本编号 == 100000209)
				{
					组包_进图(全局_自动.副本编号, 0, 6);
				}
				if (全局_自动.副本编号 == 100000002)
				{
					组包_进图(全局_自动.副本编号, 1);
				}
				if (全局_自动.副本编号 == 100000177 || 全局_自动.副本编号 == 100000176)
				{
					组包_进图(全局_自动.副本编号, 2);
				}
				if (全局_自动.副本编号 == 100000178 || 全局_自动.副本编号 == 100000179)
				{
					组包_进图(全局_自动.副本编号, 3);
				}
				if (全局_自动.副本编号 == 9700)
				{
					组包_进图(全局_自动.副本编号, 2);
				}
				if (全局_自动.副本编号 == 100000003)
				{
					组包_进图(全局_自动.副本编号, 4);
				}
				if (全局_自动.副本编号 == 100000151)
				{
					组包_进图(全局_自动.副本编号, 1, 1,0, 4294967295);
				}
				if (读写_读长整数(角色等级) > 75)
				{
					组包_进图(全局_自动.副本编号, 4);
					组包_进图(全局_自动.副本编号, 3);
					组包_进图(全局_自动.副本编号, 2);
					组包_进图(全局_自动.副本编号, 1);
					组包_进图(全局_自动.副本编号, 0);
				}
				if (读写_读长整数(角色等级) > 50)
				{
					组包_进图(全局_自动.副本编号, 3);
					组包_进图(全局_自动.副本编号, 2);
					组包_进图(全局_自动.副本编号, 1);
					组包_进图(全局_自动.副本编号, 0);
				}
				if (读写_读长整数(角色等级) > 29)
				{
					组包_进图(全局_自动.副本编号, 2);
					组包_进图(全局_自动.副本编号, 1);
					组包_进图(全局_自动.副本编号, 0);
				}
				if (读写_读长整数(角色等级) > 17)
				{
					组包_进图(全局_自动.副本编号, 1);
					组包_进图(全局_自动.副本编号, 0);
				}
				if (读写_读长整数(角色等级) <= 17)
				{
					组包_进图(全局_自动.副本编号, 0);
				}
			}
			else
			{
				if (全局_自动.副本编号 == 100000214 || 全局_自动.副本编号 == 100000212 || 全局_自动.副本编号 == 100000215 || 全局_自动.副本编号 == 100000199 || 全局_自动.副本编号 == 100000209)
				{
					组包_进图(全局_自动.副本编号, 0, 6);
				}
				if (全局_自动.副本编号 == 100000002)
				{
					组包_进图(全局_自动.副本编号, 1);
				}
				if (全局_自动.副本编号 == 100000177 || 全局_自动.副本编号 == 100000176)
				{
					组包_进图(全局_自动.副本编号, 2);
				}
				if (全局_自动.副本编号 == 100000178 || 全局_自动.副本编号 == 100000179)
				{
					组包_进图(全局_自动.副本编号, 3);
				}
				if (全局_自动.副本编号 == 9700)
				{
					组包_进图(全局_自动.副本编号, 2);
				}
				if (全局_自动.副本编号 == 100000003)
				{
					组包_进图(全局_自动.副本编号, 4);
				}
				if (全局_自动.副本编号 == 100000151)
				{
					组包_进图(全局_自动.副本编号, 1, 1, 0, 4294967295);
				}
				else
				{
					组包_进图(全局_自动.副本编号, 全局_自动.副本难度);
				}
			}
		}
		if (读配置(L"自动模式", L"智能模式") == 2)
		{
			if (是否有主线任务() == true)
			{
				组包_进图(全局_自动.副本编号, 0, 0, 0);
			}
			else
			{
				if (读写_读长整数(角色等级) > 75)
				{
					组包_进图(全局_自动.副本编号, 4);
					组包_进图(全局_自动.副本编号, 3);
					组包_进图(全局_自动.副本编号, 2);
					组包_进图(全局_自动.副本编号, 1);
					组包_进图(全局_自动.副本编号, 0);
				}
				if (读写_读长整数(角色等级) > 50)
				{
					组包_进图(全局_自动.副本编号, 3);
					组包_进图(全局_自动.副本编号, 2);
					组包_进图(全局_自动.副本编号, 1);
					组包_进图(全局_自动.副本编号, 0);
				}
				if (读写_读长整数(角色等级) > 29)
				{
					组包_进图(全局_自动.副本编号, 2);
					组包_进图(全局_自动.副本编号, 1);
					组包_进图(全局_自动.副本编号, 0);
				}
				if (读写_读长整数(角色等级) > 17)
				{
					组包_进图(全局_自动.副本编号, 1);
					组包_进图(全局_自动.副本编号, 0);
				}
				if (读写_读长整数(角色等级) <= 17)
				{
					组包_进图(全局_自动.副本编号, 0);
				}
			}

		}
		if (读配置(L"自动模式", L"智能模式") == 3)
		{
			if (读写_读长整数(角色等级) > 76)
			{
				组包_进图(全局_自动.副本编号, 4);
				组包_进图(全局_自动.副本编号, 3);
				组包_进图(全局_自动.副本编号, 2);
				组包_进图(全局_自动.副本编号, 1);
				组包_进图(全局_自动.副本编号, 0);
			}
			if (读写_读长整数(角色等级) > 52)
			{
				组包_进图(全局_自动.副本编号, 3);
				组包_进图(全局_自动.副本编号, 2);
				组包_进图(全局_自动.副本编号, 1);
				组包_进图(全局_自动.副本编号, 0);
			}
			if (读写_读长整数(角色等级) > 30)
			{
				组包_进图(全局_自动.副本编号, 2);
				组包_进图(全局_自动.副本编号, 1);
				组包_进图(全局_自动.副本编号, 0);
			}
			if (读写_读长整数(角色等级) > 19)
			{
				组包_进图(全局_自动.副本编号, 1);
				组包_进图(全局_自动.副本编号, 0);
			}
			if (读写_读长整数(角色等级) <= 19)
			{
				组包_进图(全局_自动.副本编号, 0);
			}
			
		}
		if (读配置(L"自动模式", L"智能模式") == 4)
		{
			if (全局_自动.副本编号 == 100000002)
			{
				组包_进图(全局_自动.副本编号, 1);
			}
			if (全局_自动.副本编号 == 100000176)
			{
				组包_进图(全局_自动.副本编号, 2);
			}
			if (全局_自动.副本编号 == 100000177)
			{
				组包_进图(全局_自动.副本编号, 2);
			}
			if (全局_自动.副本编号 == 100000178)
			{
				组包_进图(全局_自动.副本编号, 3);
			}
			if (全局_自动.副本编号 == 100000179)
			{
				组包_进图(全局_自动.副本编号, 3);
			}	
		}
	}
	if (封包标识 == 28)
	{
		全局_自动.参_已经进图 = true;
		全局_收包数据.参_人物指针 = 读写_读长整数(人物基址);
		全局_收包数据.参_地图编号 = 读写_读整数型(汇编_加(封包指针, 16));
		全局_收包数据.参_地图难度 = 读写_读字节型(汇编_加(封包指针, 20));
		全局_收包数据.参_地图序号 = 读写_读字节型(汇编_加(封包指针, 23));
		全局_收包数据.参_领主坐标.参_横轴坐标 = 读写_读字节型(汇编_加(封包指针, 24));
		全局_收包数据.参_领主坐标.参_纵轴坐标 = 读写_读字节型(汇编_加(封包指针, 25));
		if (全局_收包数据.参_地图难度 == 0)
		{
			神话公告(L"副本编号： " + 到文本(全局_收包数据.参_地图编号) + L"，" + L"副本难度： 普通级",1);
		}
		if (全局_收包数据.参_地图难度 == 1)
		{
			神话公告(L"副本编号： " + 到文本(全局_收包数据.参_地图编号) + L"，" + L"副本难度： 冒险级",1);
		}
		if (全局_收包数据.参_地图难度 == 2)
		{
			神话公告(L"副本编号： " + 到文本(全局_收包数据.参_地图编号) + L"，" + L"副本难度： 勇士级",1);
		}
		if (全局_收包数据.参_地图难度 == 3)
		{
			神话公告(L"副本编号： " + 到文本(全局_收包数据.参_地图编号) + L"，" + L"副本难度： 王者级",1);
		}
		if (全局_收包数据.参_地图难度 == 4)
		{
			//神话公告(L"副本编号： " + 到文本(全局_收包数据.参_地图编号) + L"，" + L"副本难度： 噩梦级",1);
		}
	}
	if (封包标识 == 29)
	{
		全局_自动.参_已经进图 = true;
		全局_自动.参_可以顺图 = false;
		全局_自动.参_顺图计次 = NULL;
		全局_收包数据.怪物数量 = NULL;
		全局_收包数据.参_当前坐标.参_横轴坐标 = 读写_读字节型(汇编_加(封包指针, 16));
		全局_收包数据.参_当前坐标.参_纵轴坐标 = 读写_读字节型(汇编_加(封包指针, 17));
		全局_收包数据.参_怪物数量 = 读写_读字节型(汇编_加(封包指针, 34));
		怪物编号.clear();
		for (全局_收包数据.参_收包计次 = 0; 全局_收包数据.参_收包计次 <= 全局_收包数据.参_怪物数量; 全局_收包数据.参_收包计次++)
		{
			/*if (读配置(L"功能处理", L"功能选择") == 1)
			{
				*(int*)汇编_加(汇编_加(封包指针, 15), 汇编_加(28, 22 * 汇编_减(全局_收包数据.参_收包计次, 1))) = 60010;
			}*/
			if (读配置(L"功能处理", L"功能选择") == 1)
			{
				全局_收包数据.怪物数量 = 汇编_加(全局_收包数据.怪物数量, 1);
				全局_收包数据.参_怪物编号 = *(short*)(汇编_加(汇编_加(封包指针, 16, 19, 汇编_减(全局_收包数据.参_收包计次, 1) * 22), 6));
				怪物编号.push_back(全局_收包数据.参_怪物编号);
			}
		}
		全局_收包数据.参_拾取数量 = (全局_收包数据.参_怪物数量 - 1) * 22;
		全局_收包数据.参_物品编号 = 读写_读字节型(封包指针 + 57 + 全局_收包数据.参_拾取数量);
		if (全局_收包数据.参_物品编号 > 20)
		{
			全局_收包数据.参_物品编号 = 0;

		}
		else if (全局_收包数据.参_物品编号 > 0)
		{
			for (全局_收包数据.参_收包计次 = 0; 全局_收包数据.参_收包计次 < 全局_收包数据.参_物品编号; 全局_收包数据.参_收包计次++)
			{
				//组包_拾取(读写_读整数型(封包指针 + 全局_收包数据.参_拾取数量 + 59 + 全局_收包数据.参_收包计次 * 21));
			}
			神话公告(L"强制提取材料[" + 到文本(全局_收包数据.参_物品编号) + L"]个，整理背包可见",1);
		}
		//神话公告(L"怪物数量：" + 到文本(全局_收包数据.参_怪物数量),1);
	}
	if (封包标识 == 30)
	{
		全局_自动.参_可以顺图 = true;
		if (读配置(L"功能处理", L"功能选择") == 1)
		{
			if (全局_收包数据.怪物数量 != 0)
			{
				for (全局_收包数据.参_收包计次 = 0; 全局_收包数据.参_收包计次 <= sizeof(怪物编号); 全局_收包数据.参_收包计次++)
				{
					组包秒杀(怪物编号[全局_收包数据.参_收包计次]);
				}
			}
		}
		if (全局_收包数据.参_地图编号 == 100000151)
		{
			for (size_t 计次 = 0; 计次 < 怪物ID.size(); 计次++)
			{
				组包秒杀(怪物ID[计次]);
			}
			怪物ID.clear();
		}
	}
	if (封包标识 == 38)
	{
		if (封包长度 != 27)
		{
			for (全局_收包数据.参_收包计次 = 0; 全局_收包数据.参_收包计次 < 读写_读字节型(封包指针 + 18); 全局_收包数据.参_收包计次++)组包_拾取(*(int*)(封包指针 + 20) + 全局_收包数据.参_收包计次);
		}
	}
	if (封包标识 == 34)
	{
		全局_收包数据.参_通关计次 = 0;//这个=几就是默认几
		std::string strcount;
		fstream fileread("C:\\南樱.txt", std::ios::in); //读取文件
		fileread >> strcount;
		全局_收包数据.参_通关计次 = std::atoi(strcount.c_str());
		fileread.close();
		fstream filewrite("C:\\南樱.txt", std::ios::out); //写入文件
		strcount = std::to_string(++全局_收包数据.参_通关计次);
		filewrite << strcount;
		filewrite.close();
		全局_收包数据.参_通关时间 = 通关时间(读写_读整数型(汇编_加(汇编_加(封包指针, 16), 1)));
		全局_收包数据.参_通关计次 = 汇编_加(全局_收包数据.参_通关计次, 1);
		神话公告(L"计次 [ " + 到文本(全局_收包数据.参_通关计次) + L" ] 次 ");
		神话公告(L"地图 [ " + 读文本(读偏移型(商店基址 - 16, { 时间基址, 门型偏移, 地图名称, 0 }), 64) + L"  ] " );
		组包_通关翻牌();
	}
	if (封包标识 == 35 && 全局_总开关.自动刷图开关 == true)
	{
		组包_领取翻牌();
		if (读配置(L"装备处理", L"装备分解") == 1)
		{
			装备出售();
		}
		if (读配置(L"装备处理", L"装备分解") == 2)
		{
			装备分解();
		}
		组包_整理背包();
	}
	if (封包标识 == 261 && 全局_总开关.自动刷图开关 == true)
	{
		if (读配置(L"自动模式", L"智能模式") == 2)
		{
			if (全局_自动.全局任务 == 3449)
			{
				提交Call(全局_自动.全局任务);
			}
			if (全局_自动.全局任务 == 3649)
			{
				提交Call(全局_自动.全局任务);
			}
			if (全局_自动.全局任务 == 3753)
			{
				提交Call(全局_自动.全局任务);
			}
			if (全局_自动.全局任务 == 6209)
			{
				提交Call(全局_自动.全局任务);
				完成Call(全局_自动.全局任务);
			}
			if (全局_自动.全局任务 != 6209 || 全局_自动.全局任务 != 3649 || 全局_自动.全局任务 != 3753 || 全局_自动.全局任务 != 6209)
			{
				完成Call(全局_自动.全局任务);
				提交Call(全局_自动.全局任务);
			}
		}
		Send_组包特殊();
		组包_强制回城();

	}
	if (封包标识 == 1750 && 全局_总开关.自动刷图开关 == true)
	{
		组包_强制回城();
	}
	if (封包标识 == 1117 && 全局_总开关.自动刷图开关 == true)
	{
		if (读配置(L"功能处理", L"功能选择") == 2)
		{
			if (全局_总开关.技能全屏开关 == false)
			{
				技能全屏();
			}
		}
	}
	if (封包标识 == 31 && 全局_总开关.自动刷图开关 == true)
	{
		if (读配置(L"功能处理", L"功能选择") == 2)
		{
			if (全局_总开关.技能全屏开关 == true)
			{
				技能全屏();
			}
		}
	}
	if (封包标识 == 1345 && 全局_总开关.自动刷图开关 == true)
	{
		全局_自动.参_切换角色 = false;
		组包_选择角色(全局_自动.参_刷图角色);
		神话公告(L"开始第： " + 到文本(全局_自动.参_公告角色) + L"  个角色");
	}
}
