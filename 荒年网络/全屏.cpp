#include "pch.h"

void 技能全屏()
{
	全局_总开关.技能全屏开关 = !全局_总开关.技能全屏开关;
	if (全局_总开关.技能全屏开关)
	{
		SetTimer(全局_收包数据.游戏句柄, 3344, 读配置(L"全屏配置", L"技能频率"), (TIMERPROC)全屏遍历);
		神话公告(L"开启全屏",1);
	}
	else
	{
		KillTimer(全局_收包数据.游戏句柄, 3344);
		神话公告(L"关闭全屏",1);
	}
}



void 全屏遍历()
{
	if (读写_读长整数(游戏状态) != 3)
	{
		return;
	}
	遍历结构 遍历;
	遍历.首地址 = 读写_读长整数(读写_读长整数(读写_读长整数(人物基址) + 地图偏移) + 地图开始2);
	遍历.尾地址 = 读写_读长整数(读写_读长整数(读写_读长整数(人物基址) + 地图偏移) + 地图结束2);
	遍历.怪物数量 = (遍历.尾地址 - 遍历.首地址) / 8;
	for (size_t i = 0; i < 遍历.怪物数量; i++)
	{
		遍历.怪物地址 = 读写_读长整数(遍历.首地址 + i * 8);
		遍历.怪物类型A = 读写_读整数型(遍历.怪物地址 + 类型偏移);
		遍历.怪物类型B = 读写_读整数型(遍历.怪物地址 + 类型偏移 + 4);
		if (遍历.怪物类型A == 529 || 遍历.怪物类型A == 273 || 遍历.怪物类型A == 545)
		{
			遍历.怪物阵营 = 读写_读整数型(遍历.怪物地址 + 阵营偏移);
			遍历.怪物血量 = 读写_读长整数(遍历.怪物地址 + 怪物血量);
			if (遍历.怪物阵营 != 0 && 遍历.怪物血量 != 0)
			{
				if (遍历.怪物地址 != 0)
				{
					if (读配置(L"全屏配置", L"技能模式")==1)
					{
						技能Call(读写_读长整数(人物基址), 读配置(L"全屏配置", L"技能代码"), 遍历.技能伤害 = 读配置(L"全屏配置", L"技能伤害"), 怪物_坐标(遍历.怪物地址, 0), 怪物_坐标(遍历.怪物地址, 1), 怪物_坐标(遍历.怪物地址, 2), 读配置(L"全屏配置", L"技能大小"));
					}
					if (读配置(L"全屏配置", L"技能模式")==2)
					{
						技能Call(0, 读配置(L"全屏配置", L"技能代码"), 遍历.技能伤害 = 读配置(L"全屏配置", L"技能伤害"), 怪物_坐标(遍历.怪物地址, 0), 怪物_坐标(遍历.怪物地址, 1), 怪物_坐标(遍历.怪物地址, 2), 读配置(L"全屏配置", L"技能大小"));
					}
					遍历.技能个数 = 遍历.技能个数 + 1;
					if (遍历.技能个数 == 读配置(L"全屏配置", L"技能个数"))
					{
						break;
					}
				}
			}
		}
		if (遍历.怪物类型B == 273 || 遍历.怪物类型B == 545 || 遍历.怪物类型B == 545)
		{
			遍历.怪物阵营 = 读写_读整数型(遍历.怪物地址 + 阵营偏移);
			遍历.怪物血量 = 读写_读长整数(遍历.怪物地址 + 怪物血量);
			if (遍历.怪物阵营 != 0 && 遍历.怪物血量 != 0)
			{
				if (遍历.怪物地址 != 0)
				{
					if (读配置(L"全屏配置", L"技能模式") == 1)
					{
						技能Call(读写_读长整数(人物基址), 读配置(L"全屏配置", L"技能代码"), 遍历.技能伤害 = 读配置(L"全屏配置", L"技能伤害"), 人物_坐标(遍历.怪物地址, 0), 人物_坐标(遍历.怪物地址, 1), 人物_坐标(遍历.怪物地址, 2), 读配置(L"全屏配置", L"技能大小"));
					}
					if (读配置(L"全屏配置", L"技能模式") == 2)
					{
						技能Call(0, 读配置(L"全屏配置", L"技能代码"), 遍历.技能伤害 = 读配置(L"全屏配置", L"技能伤害"), 人物_坐标(遍历.怪物地址, 0), 人物_坐标(遍历.怪物地址, 1), 人物_坐标(遍历.怪物地址, 2), 读配置(L"全屏配置", L"技能大小"));
					}
					遍历.技能个数 = 遍历.技能个数 + 1;
					if (遍历.技能个数 == 读配置(L"全屏配置", L"技能个数"))
					{
						break;
					}
				}
			}
		}
	}
}

void 跟随遍历()
{
	遍历结构 遍历;
	遍历.首地址 = 读写_读长整数(读写_读长整数(读写_读长整数(人物基址) + 地图偏移) + 地图开始2);
	遍历.尾地址 = 读写_读长整数(读写_读长整数(读写_读长整数(人物基址) + 地图偏移) + 地图结束2);
	遍历.怪物数量 = (遍历.尾地址 - 遍历.首地址) / 8;
	for (size_t i = 0; i < 遍历.怪物数量; i++)
	{
		遍历.怪物地址 = 读写_读长整数(遍历.首地址 + i * 8);
		遍历.怪物类型A = 读写_读整数型(遍历.怪物地址 + 类型偏移);
		遍历.怪物类型B = 读写_读整数型(遍历.怪物地址 + 类型偏移 + 4);
		if (遍历.怪物类型A == 529 || 遍历.怪物类型A == 273 || 遍历.怪物类型A == 545)
		{
			遍历.怪物阵营 = 读写_读整数型(遍历.怪物地址 + 阵营偏移);
			遍历.怪物血量 = 读写_读长整数(遍历.怪物地址 + 怪物血量);
			if (遍历.怪物阵营 != 0 && 遍历.怪物血量 != 0)
			{
				if (遍历.怪物地址 != 0)
				{
					坐标call(读写_读长整数(人物基址), 怪物_坐标(遍历.怪物地址, 0), 怪物_坐标(遍历.怪物地址, 1), 怪物_坐标(遍历.怪物地址, 2));
					break;
				}
			}
		}
		if (遍历.怪物类型B == 273 || 遍历.怪物类型B == 545 || 遍历.怪物类型B == 545)
		{
			遍历.怪物阵营 = 读写_读整数型(遍历.怪物地址 + 阵营偏移);
			遍历.怪物血量 = 读写_读长整数(遍历.怪物地址 + 怪物血量);
			if (遍历.怪物阵营 != 0 && 遍历.怪物血量 != 0)
			{
				if (遍历.怪物地址 != 0)
				{
					坐标call(读写_读长整数(人物基址), 人物_坐标(遍历.怪物地址, 0), 人物_坐标(遍历.怪物地址, 1), 人物_坐标(遍历.怪物地址, 2));
					break;
				}
			}
		}
	}
}


void 装备出售()
{
	int 件数 = 0;
	ULONG64 局_首部地址 = 读写_读长整数(读写_读长整数(读写_读长整数(人物基址) + 背包偏移) + 背包二级) + 72;
	for (size_t i = 0; i < 56; i++)
	{
		ULONG64 局_装备指针 = 读写_读长整数(局_首部地址 + i * 8);
		if (局_装备指针 != 0)
		{
			ULONG 局_装备属性 = 读写_读整数型(局_装备指针 + 712);
			if (局_装备属性 == 0 || 局_装备属性 == 1 || 局_装备属性 == 2)
			{
				组包_卖物(i + 9);
				件数++;
			}
		}
	}
	神话公告(L"出售[" + 到文本(件数) + L"]件",1);
}

void 装备分解()
{
	int 件数 = 0;
	ULONG64 局_首部地址 = 读写_读长整数(读写_读长整数(读写_读长整数(人物基址) + 背包偏移) + 背包二级) + 72;
	for (size_t i = 0; i < 56; i++)
	{
		ULONG64 局_装备指针 = 读写_读长整数(局_首部地址 + i * 8);
		if (局_装备指针 != 0)
		{
			ULONG 局_装备属性 = 读写_读整数型(局_装备指针 + 712);
			if (局_装备属性 == 0 || 局_装备属性 == 1 || 局_装备属性 == 2)
			{
				组包_分解(i + 9);
				件数++;
			}
		}
	}
	神话公告(L"分解[" + 到文本(件数) + L"]件",1);
}

void 装备丢弃()
{
	int 件数 = 0;
	ULONG64 局_首部地址 = 读写_读长整数(读写_读长整数(读写_读长整数(人物基址) + 背包偏移) + 背包二级) + 72;
	for (size_t i = 0; i < 56; i++)
	{
		ULONG64 局_装备指针 = 读写_读长整数(局_首部地址 + i * 8);
		if (局_装备指针 != 0)
		{
			ULONG 局_装备属性 = 读写_读整数型(局_装备指针 + 712);
			if (局_装备属性 == 0 || 局_装备属性 == 1 || 局_装备属性 == 2)
			{
				丢弃Call(i + 9);
				Sleep(100);
				件数++;
			}
		}
	}
	神话公告(L"丢弃[" + 到文本(件数) + L"]件",1);
}

void 药品()
{
	物品Call(1025);
	物品Call(1072);
	物品Call(1091);
	物品Call(1298);
	物品Call(2600027);
	物品Call(2600021);
	物品Call(2600561);
	物品Call(2600562);
	物品Call(2600655);
	物品Call(2600656);
	物品Call(2600021);
	物品Call(2600028);
	物品Call(2600020);
	物品Call(2600022);
	物品Call(2680766);
	物品Call(2683266);
	物品Call(2682833);
	物品Call(2683263);
	物品Call(2683264);
	物品Call(10004110);
	物品Call(10004505);
	物品Call(10004695);
	物品Call(10088698);
	物品Call(10088630);
	物品Call(10088699);
	物品Call(10088636);
	物品Call(10099409);
	物品Call(10007342);
	物品Call(10007483);
	物品Call(490703676);
	物品Call(490703930);
	物品Call(490703931);
	物品Call(490705903);
	物品Call(490013664);
	物品Call(490014049);
	物品Call(490016659);
	物品Call(490017343);
	物品Call(490010896);
	物品Call(490015961);
	物品Call(490010607);
	物品Call(7163);
}


